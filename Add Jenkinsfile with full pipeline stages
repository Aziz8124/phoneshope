pipeline {
    agent any

    tools {
        maven 'Maven_3.8.8'
        jdk 'Java_17'
    }

    environment {
        MAIL_RECIPIENT = "azoz.sh2003@gmail.com"
        SONARQUBE_ENV = 'MySonarQube'
        ZAP_DOCKER_IMAGE = 'ghcr.io/zaproxy/zaproxy:stable'
        ZAP_PORT = '8090'
        ZAP_HOST = '0.0.0.0'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Aziz8124/phoneshope.git',
                    credentialsId: 'GITHUB_CREDENTIALS_ID'
            }
        }

        stage('Build') {
            steps {
                echo 'Building the project...'
                bat 'mvn clean package'
            }
        }

        // مرحلة DAST باستخدام ZAP
        stage('DAST Security Scan') {
            steps {
                echo 'Starting ZAP DAST scan...'
                script {
                    // تشغيل ZAP كـ Docker Container في الخلفية
                    bat """
                    docker run -d -u zap -p ${ZAP_PORT}:${ZAP_PORT} \\
                    ${ZAP_DOCKER_IMAGE} zap.sh -daemon -port ${ZAP_PORT} -host ${ZAP_HOST} -config api.disablekey=true -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
                    """

                    // نضيف تأخير 15 ثانية لتأكد من أن ZAP جاهز
                    sleep(time: 15, unit: 'SECONDS')

                    // إطلاق scan على تطبيقك المحلي (مثال: localhost:8080)
                    bat """
                    docker exec -i \$(docker ps -q -f ancestor=${ZAP_DOCKER_IMAGE}) \\
                    zap-cli --zap-url http://localhost:${ZAP_PORT} --start-options '-config api.disablekey=true' open-url http://localhost:8080
                    docker exec -i \$(docker ps -q -f ancestor=${ZAP_DOCKER_IMAGE}) \\
                    zap-cli --zap-url http://localhost:${ZAP_PORT} active-scan -r http://localhost:8080
                    docker exec -i \$(docker ps -q -f ancestor=${ZAP_DOCKER_IMAGE}) \\
                    zap-cli --zap-url http://localhost:${ZAP_PORT} report -o zap-report.html -f html
                    """
                    echo "ZAP DAST scan completed. Report saved as zap-report.html"
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Scan...'
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    bat 'mvn sonar:sonar -Dsonar.projectKey=phoneshope -Dsonar.projectName="PhoneShope"'
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo 'Build successful!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Good news! The build was successful.\nCheck console output at: ${env.BUILD_URL}"
        }
        failure {
            echo 'Build failed!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Build failed. Please check the console output at: ${env.BUILD_URL}"
        }
    }
}
