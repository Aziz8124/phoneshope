pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('SONAR_TOKEN')
    }
 
    tools {
        maven 'Maven_3.8.8'
        jdk 'Java_17'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo 'Checking out from Git...'
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'Building the project using Maven...'
                bat "\"${tool 'Maven_3.8.8'}\\bin\\mvn\" clean package"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv('MySonarQube') {
                    bat "\"${tool 'Maven_3.8.8'}\\bin\\mvn\" sonar:sonar -Dsonar.projectKey=phoneshope -Dsonar.host.url=http://localhost:9090 -Dsonar.login=${env.SONAR_TOKEN}"
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat "\"${tool 'Maven_3.8.8'}\\bin\\mvn\" test"
            }
        }

        stage('DAST Scan') {
            steps {
                echo 'Starting ZAP DAST scan...'
                // إنشاء المجلد لو ما موجود
                bat 'mkdir "C:\\Users\\azozs\\Desktop\\PhoneShope_Final\\reports" || echo Folder exists'
                // تشغيل ZAP Baseline Scan مع catchError لتجنب فشل الـ pipeline
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    bat 'docker run -v "C:\\Users\\azozs\\Desktop\\PhoneShope_Final":/zap/wrk:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://host.docker.internal:9000 -r reports/zap_report.html'
                }
                echo 'DAST report saved at C:\\Users\\azozs\\Desktop\\PhoneShope_Final\\reports\\zap_report.html'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Build and scans succeeded!'
        }
        unstable {
            echo 'Build finished with warnings (DAST scan has issues).'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
