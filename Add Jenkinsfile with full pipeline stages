pipeline {
    agent any

    tools {
        maven 'Maven_3.8.8'  // تأكد الاسم مطابق لما موجود في Jenkins
        jdk 'Java_17'        // تأكد الاسم مطابق لما موجود في Jenkins
    }

    environment {
        MAIL_RECIPIENT = "azoz.sh2003@gmail.com"
        SONARQUBE_ENV = 'MySonarQube' // <-- الاسم الصحيح
        DOCKER_IMAGE = 'ghcr.io/zaproxy/zaproxy:stable'
        ZAP_PORT = '8099'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Aziz8124/phoneshope.git'
            }
        }

        stage('Build') {
            steps {
                echo 'Building the project...'
                bat 'mvn clean package'
            }
        }

        stage('Start ZAP') {
            steps {
                echo 'Starting ZAP DAST scanner...'
                // تشغيل ZAP في docker
                bat """
                docker run -d -u zap -p ${ZAP_PORT}:${ZAP_PORT} ${DOCKER_IMAGE} zap.sh -daemon -port ${ZAP_PORT} -host 0.0.0.0 -config api.disablekey=true -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
                """
                echo 'Waiting 15 seconds for ZAP to initialize...'
                bat 'ping 127.0.0.1 -n 15 > nul'
            }
        }

        stage('DAST Security Scan') {
            steps {
                echo 'Running ZAP DAST scan...'
                // مثال أمر scan باستخدام API لـ ZAP (عدل حسب URL تطبيقك)
                bat """
                curl -s "http://localhost:${ZAP_PORT}/JSON/ascan/action/scan/?url=http://localhost:8080&recurse=true&inScopeOnly=false"
                """
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Scan...'
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    bat 'mvn sonar:sonar -Dsonar.projectKey=phoneshope -Dsonar.projectName="PhoneShope"'
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo 'Build successful!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Good news! The build was successful.\nCheck console output at: ${env.BUILD_URL}"
        }
        failure {
            echo 'Build failed!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Build failed. Please check the console output at: ${env.BUILD_URL}"
        }
    }
}
