pipeline {
    agent any

    tools {
        maven 'Maven_3.8.8'
        jdk 'Java_17'
    }

    environment {
        MAIL_RECIPIENT = "azoz.sh2003@gmail.com"
        SONARQUBE_ENV = 'MySonarQube'
        ZAP_PORT = '8090'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Aziz8124/phoneshope.git',
                    credentialsId: 'GITHUB_CREDENTIALS_ID'
            }
        }

        stage('Build') {
            steps {
                echo 'Building the project...'
                bat 'mvn clean package'
            }
        }

        stage('Start ZAP') {
            steps {
                echo 'Starting ZAP DAST scanner...'
                bat """
                docker run -d -u zap -p %ZAP_PORT%:8090 ghcr.io/zaproxy/zaproxy:stable zap.sh -daemon -port 8090 -host 0.0.0.0 -config api.disablekey=true -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
                """
                echo 'Waiting 15 seconds for ZAP to initialize...'
                bat 'timeout /t 15'
            }
        }

        stage('DAST Security Scan') {
            steps {
                echo 'Running ZAP DAST scan...'
                // مثال: scan الموقع المحلي للتطبيق
                bat """
                docker exec -i \$(docker ps -q --filter "ancestor=ghcr.io/zaproxy/zaproxy:stable") zap-cli -p 8090 quick-scan --self-contained --start-options "-config api.disablekey=true" http://localhost:8080
                """
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Scan...'
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    bat 'mvn sonar:sonar -Dsonar.projectKey=phoneshope -Dsonar.projectName="PhoneShope"'
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo 'Build successful!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Good news! The build was successful.\nCheck console output at: ${env.BUILD_URL}"
        }
        failure {
            echo 'Build failed!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Build failed. Please check the console output at: ${env.BUILD_URL}"
        }
    }
}
