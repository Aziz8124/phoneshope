pipeline {
    agent any

    tools {
        maven 'Maven_3.8.8'
        jdk 'Java_17'
    }

    environment {
        MAIL_RECIPIENT = "azoz.sh2003@gmail.com"
        SONARQUBE_ENV = 'MySonarQube'
        ZAP_PATH = '"C:\\Program Files\\ZAP\\Zed Attack Proxy\\zap.bat"' // مسار ZAP الصحيح
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Aziz8124/phoneshope.git',
                    credentialsId: 'GITHUB_CREDENTIALS_ID'
            }
        }

        stage('Build') {
            steps {
                echo 'Building the project...'
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube Scan...'
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    bat 'mvn sonar:sonar -Dsonar.projectKey=phoneshope -Dsonar.projectName="PhoneShope"'
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Run Application') {
            steps {
                echo 'Starting PhoneShope app in background...'
                bat "start /B mvn spring-boot:run -Dserver.port=8081"
                sleep(time: 20, unit: 'SECONDS')  // وقت للتطبيق ليشتغل
            }
        }

        stage('DAST - OWASP ZAP Scan') {
            steps {
                echo 'Running OWASP ZAP DAST scan...'

                startZap(
                    zapHome: "${ZAP_PATH}",
                    port: 8090,
                    host: '127.0.0.1',
                    timeout: 120,
                    allowedHosts: ['.*'],
                    sessionPath: '',
                    externalZap: false,
                    rootCaFile: '',
                    additionalConfigurations: [
                        '-daemon',
                        '-config api.disablekey=true',
                        '-config api.addrs.addr.regex=true',
                        '-config api.addrs.addr.name=.*',
                        '-config connection.timeoutInSecs=600',
                        "-dir C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\PhoneShope-Automation\\zaptemp"
                    ]
                )

                runZapCrawler(
                    host: 'http://localhost:8081',
                    maxChildren: 10,
                    contextId: 0,
                    contextName: 'Default Context',
                    recurse: true,
                    subtreeOnly: false,
                    userId: 0
                )

                runZapAttack(
                    contextId: 0,
                    scanPolicyName: 'Default Policy',
                    inScopeOnly: true,
                    method: 'GET',
                    postData: '',
                    recurse: true,
                    userId: 0
                )

                archiveZap(
                    failAllAlerts: 0,
                    failHighAlerts: 0,
                    failMediumAlerts: 0,
                    failLowAlerts: 0,
                    falsePositivesFilePath: '',
                    keepAlive: false
                )

                stopZap()
            }
        }

        stage('Stop Application') {
            steps {
                echo 'Stopping PhoneShope app...'
                bat 'taskkill /F /IM java.exe || exit 0'
            }
        }
    }

    post {
        success {
            echo 'Build successful!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Good news! The build was successful.\nCheck console output at: ${env.BUILD_URL}"
        }
        failure {
            echo 'Build failed!'
            mail to: "${MAIL_RECIPIENT}",
                 subject: "Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Build failed. Please check the console output at: ${env.BUILD_URL}"
        }
    }
}
